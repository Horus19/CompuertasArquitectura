// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   
   // Put you code here:
   // presenta x
   Mux16(a = x, b[0..15] = false, sel = zx, out = x1); // x o 0
   
   Not16(in = x1, out = x2); // no x
   Mux16(a = x1, b = x2, sel = nx, out = xpr); // x presentado (xpr)
   
   // Presenta y
   Mux16(a = y, b[0..15] = false, sel = zy, out = y1); // y o 0
   Not16(in = y1, out = y2); // no y
   
   Mux16(a = y1, b = y2, sel = ny, out = ypr); // y presentado (ypr)

   // Opera f
   And16(a = xpr, b = ypr, out = f1);
   Add16(a= xpr, b = ypr, out = f2);

   Mux16(a = f1, b = f2, sel = f, out = opr);

   // Niega la salida
   Not16(in = opr, out = notf);

   // Salida
   Mux16(a = opr, b = notf, sel = no, out = outp);

  // Probando si es igual a cero
  Or16Way(in = outp, out = z1);
  Not(in = z1, out = zr );

  // Probando si es menor a cero
  And16(a = outp, b = true, out[0..15] = out, out[15] = ng);

  
}